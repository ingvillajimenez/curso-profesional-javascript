{"id":"ejercicios/promises.html","dependencies":[{"name":"/Users/juan/code/platzi/curso-profesional-javascript/package.json","includedInParent":true,"mtime":1672010962668}],"generated":{"html":"<html>\n  <head>\n    <title>Promesas</title>\n  </head>\n\n  <body>\n    <a href=\"/ejercicios/\">Go back</a>\n\n    <ul>\n      <li><button id=\"sequence\">Get Top Movies in Sequence</button></li>\n      <li><button id=\"parallel\">Get Top Movies in Parallel</button></li>\n      <li><button id=\"fastest\">Get Fastest Top Movie</button></li>\n    </ul>\n\n    <ul id=\"movies\"></ul>\n\n    <script>// Ejemplo: renderMovies([{ title: \"Spider-Man\", release_date: \"2019-06-30\", poster_path: \"/rjbNpRMoVvqHmhmksbokcyCr7wn.jpg\" }])\n// Traducir las funciones de usar thens a usar async/await\n// Crear funci贸n para que no nos gastemos la cantidad de requests demasiado rapido\n// Crear funci贸n donde hacemos requests secuenciales\n// Crear funci贸n donde hacemos requests en paralelo\n// Crear funci贸n donde obtenemos el primer request que llegue\n\n// The Movie Database API: https://developers.themoviedb.org/3/getting-started/introduction\nconst apiKey = \"b89fc45c2067cbd33560270639722eae\";\nasync function getMovie(id) {\n  const url = `https://api.themoviedb.org/3/movie/${id}?api_key=${apiKey}`;\n  const response = await fetch(url);\n  const data = await response.json();\n  return data;\n}\nasync function getPopularMovies() {\n  const url = `https://api.themoviedb.org/3/discover/movie?sort_by=popularity.desc&api_key=${apiKey}`;\n  const response = await fetch(url);\n  const data = await response.json();\n  return data.results;\n}\nasync function getTopMoviesIds(n = 3) {\n  // return getPopularMovies().then((popularMovies) =>\n  //   popularMovies.slice(0, n).map((movie) => movie.id)\n  // );\n  // try {\n  //   const popularMovies = await getPopularMovies();\n  // } catch (error) {\n  //   console.log(error.message);\n  // }\n\n  const popularMovies = await getPopularMovies();\n  const ids = popularMovies.slice(0, n).map(movie => movie.id);\n  return ids;\n}\nfunction renderMovies(movies) {\n  const movieList = document.getElementById(\"movies\");\n  movieList.innerHTML = \"\";\n  movies.forEach(movie => {\n    const listItem = document.createElement(\"li\");\n    listItem.innerHTML = `\n            <img src=\"https://image.tmdb.org/t/p/w342${movie.poster_path}\" />\n            <h5>${movie.title}</h5>\n            <p>Released on <em>${movie.release_date}</em></p>\n            `;\n    movieList.appendChild(listItem);\n  });\n}\nasync function getTopMoviesInSequence() {\n  const ids = await getTopMoviesIds();\n  const movies = [];\n  for (const id of ids) {\n    const movie = await getMovie(id);\n    movies.push(movie);\n  }\n  return movies;\n}\nasync function getTopMoviesInParallel() {\n  const ids = await getTopMoviesIds();\n  const moviePromises = ids.map(id => getMovie(id));\n  const movies = await Promise.all(moviePromises);\n  return movies;\n}\nasync function getFastestTopMovie() {\n  const ids = await getTopMoviesIds();\n  const moviePromises = ids.map(id => getMovie(id));\n  const movie = Promise.race(moviePromises);\n  return movie;\n}\ndocument.getElementById(\"sequence\").onclick = async function () {\n  const movies = await getTopMoviesInSequence();\n  renderMovies(movies);\n};\ndocument.getElementById(\"parallel\").onclick = async function () {\n  const movies = await getTopMoviesInParallel();\n  renderMovies(movies);\n};\ndocument.getElementById(\"fastest\").onclick = async function () {\n  const movie = await getFastestTopMovie();\n  renderMovies([movie]);\n};</script>\n  </body>\n</html>\n"},"sourceMaps":null,"error":null,"hash":"9118817e6eaca05fbcfd68ddd76c1efe","cacheData":{"env":{}}}