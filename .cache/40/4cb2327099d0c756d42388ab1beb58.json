{"id":"ejercicios/generators.html","dependencies":[{"name":"/Users/juan/code/platzi/curso-profesional-javascript/package.json","includedInParent":true,"mtime":1672010962668}],"generated":{"html":"<html>\n  <head>\n    <title>Generators</title>\n  </head>\n\n  <body>\n    <a href=\"/ejercicios/\">Go back</a>\n    <p><em>Abre la consola</em></p>\n\n    <script>// Los generadores son funciones de las que se puede salir y volver a entrar.\n// Su contexto (asociación de variables) será conservado entre las reentradas.\n// Cada vez que llamamos next, la ejecución del generador va a continuar hasta el proximo yield\nfunction* simpleGenerator() {\n  console.log(\"GENERATOR START\");\n  yield 1;\n  yield 2;\n  yield 3;\n  console.log(\"GENERATOR END\");\n}\n\n// const gen = simpleGenerator();\n// gen.next();\n\n// Podemos hacer generadores infinitos.\nfunction* idMaker() {\n  let id = 1;\n  while (true) {\n    yield id;\n    id = id + 1;\n  }\n}\n\n// const gen = idMaker();\n// gen.next();\n\n// Cuando llamamos next también podemos pasar valores que la función recibe.\nfunction* idMakerWithReset() {\n  let id = 1;\n  let reset;\n  while (true) {\n    reset = yield id;\n    if (reset) {\n      id = 1;\n    } else {\n      id = id + 1;\n    }\n  }\n}\n\n// const gen = idMakerWithReset();\n// gen.next(true);\n\n// Ahora hagamos un ejemplo un poco más complejo: la secuencia fibonacci\nfunction* fibonacci() {\n  let a = 1;\n  let b = 1;\n  while (true) {\n    const nextNumber = a + b;\n    a = b;\n    b = nextNumber;\n    yield nextNumber;\n  }\n}\n\n// const gen = fibonacci();\n// gen.next();</script>\n  </body>\n</html>\n"},"sourceMaps":null,"error":null,"hash":"270f33c7a543cb4b14c5c5297d0d6e70","cacheData":{"env":{}}}